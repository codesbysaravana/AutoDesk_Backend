# utils/github_push.py

import os
import tempfile
from github import Github
from git import Repo, GitCommandError
from urllib.parse import urlparse
import datetime

GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") or "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"

def auto_merge_pr(gh_repo, branch: str, base_branch: str = "main"):
    """
    Automatically merges a PR from `branch` into `main` if it exists.
    """
    open_prs = gh_repo.get_pulls(state='open', base=base_branch, head=f"{gh_repo.owner.login}:{branch}")
    for pr in open_prs:
        try:
            pr.merge(commit_message="Auto-merging Dockerfile PR via AutoDock 🤖")
            print(f"✅ PR #{pr.number} auto-merged!")
            return pr
        except Exception as e:
            raise RuntimeError(f"❌ Failed to merge PR #{pr.number}: {e}")
    print("⚠️ No matching open PR to auto-merge.")
    return None




def create_pr_with_dockerfile(github_url: str, dockerfile_path: str, github_pat: str) -> str:
    if not GITHUB_TOKEN:
        raise EnvironmentError("Missing GITHUB_TOKEN in environment variables.")

    repo_name = github_url.rstrip("/").split("/")[-2] + "/" + github_url.rstrip("/").split("/")[-1].replace(".git", "")
    temp_dir = tempfile.mkdtemp()

    # Clone using token
    clone_url = github_url.replace("https://", f"https://{GITHUB_TOKEN}@")
    repo = Repo.clone_from(clone_url, temp_dir)

    # Git identity config (needed for GitHub commits)
    repo.git.config("user.name", "AutoDock Bot")
    repo.git.config("user.email", "autodock@example.com")

    # Define branch
    new_branch = "autodock/dockerfile"

    # Fetch + checkout or create
    try:
        repo.git.checkout("-b", new_branch)
    except GitCommandError:
        repo.git.fetch()
        repo.git.checkout(new_branch)

    # Rebase with remote to avoid non-fast-forward
    try:
        repo.git.pull("origin", new_branch, "--rebase")
    except GitCommandError:
        print(f"[WARN] Failed to pull --rebase from origin/{new_branch}. Trying force push fallback...")

    # Copy Dockerfile
    filename = os.path.basename(dockerfile_path)
    dest_path = os.path.join(temp_dir, filename)
    with open(dockerfile_path, "r") as src, open(dest_path, "w") as dst:
        dst.write(src.read())

    # ✅ Inject a timestamp comment to ensure change
    with open(dest_path, "a") as f:
        f.write(f"\n# AutoDock timestamp: {datetime.datetime.utcnow().isoformat()}Z")

    repo.git.add(filename)

    # Always commit since timestamp ensures change
    repo.git.commit("-m", "Add/Update autogenerated Dockerfile via AutoDock AI")

    # Safe push with fallback
    try:
        repo.git.push("--set-upstream", "origin", new_branch)
    except GitCommandError as e:
        if "non-fast-forward" in str(e):
            print(f"[ERROR] Push failed due to non-fast-forward. Trying force push...")
            repo.git.push("--force", "origin", new_branch)
        else:
            raise e

    # Create PR
    github_token = github_pat or os.getenv("GITHUB_TOKEN")
    g = Github(github_token)

    gh_repo = g.get_repo(repo_name)

    # Check if PR already exists
    open_prs = gh_repo.get_pulls(state="open", head=f"{gh_repo.owner.login}:{new_branch}")
    if open_prs.totalCount > 0:
        pr = open_prs[0]
    else:
        pr = gh_repo.create_pull(
            title="Add Dockerfile (autogenerated)",
            body="This PR contains an autogenerated Dockerfile for your project.",
            head=new_branch,
            base="main"
        )

    # ✅ Auto-merge right after creating PR
    auto_merge_pr(gh_repo, branch=new_branch)

    return pr.html_url